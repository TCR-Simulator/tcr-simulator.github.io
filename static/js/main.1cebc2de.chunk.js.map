{"version":3,"sources":["TcrDialog.js","TcrBar.js","BaseCard.js","SettingsFrame.js","ResultsFrame.js","App.js","serviceWorker.js","index.js"],"names":["TcrDialog","props","classes","open","handleClose","tcrBar","react_default","a","createElement","Dialog_default","onClose","aria-labelledby","className","dialogBox","fullWidth","DialogTitle_default","id","DialogContent_default","section","Assignment_default","subtitleIcon","Typography_default","variant","subtitle","ListItem_default","ListItem","ListItemText_default","listItemText","textFieldContainer","FormControl_default","margin","InputLabel_default","htmlFor","FormLabelClasses","root","textFieldLabel","focused","textFieldFocused","Input_default","underline","textFieldUnderline","AssignmentTurnedIn_default","Checkbox_default","defaultChecked","Pageview_default","DialogActions_default","Button_default","onClick","color","setState","state","chipData","Object","toConsumableArray","push","key","Math","floor","random","tcrDialogOpened","handleAdd","defaultProps","withStyles","theme","display","paddingLeft","marginTop","position","maxWidth","padding","marginLeft","marginBottom","flexWrap","spacing","unit","&$textFieldFocused","grey","&:after","borderBottomColor","borderBottom","TcrBar","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","i","data","_this2","chipToDelete","indexOf","splice","alert","concat","_this3","_this4","_this5","_this$state","Paper_default","elevation","square","component","map","Chip_default","label","onDelete","handleDelete","handleClick","chip","handleAddClick","src_TcrDialog","handleTcrDialogClose","React","Component","objectSpread","mixins","gutters","paddingTop","paddingBottom","BaseCard","handleChange","name","event","defineProperty","target","value","handleChangeQuality","checked","handleChangeFreqSlider","frequency","handleChangeQualSlider","qualityScale","ignoreQuality","type","FormControlLabel_default","control","onChange","Slider_default","slider","_this$state2","population","Card_default","card","CardContent_default","agent","toUpperCase","container","noValidate","autoComplete","TextField_default","textField","InputLabelProps","shrink","getBehaviorComponents","width","bullet","transform","title","fontSize","pos","fontWeight","agents","behaviors","acceptanceLikelihood","SettingsFrame","src_TcrBar","agentsList","List_default","src_BaseCard","ResultsFrame","createMuiTheme","palette","primary","teal","secondary","main","height","flexDirection","content","settingFrame","overflow","boxShadow","borderRight","zIndex","flexBasis","boxSizing","resultFrame","flexGrow","core_styles","AppBar_default","Toolbar_default","src_SettingsFrame","src_ResultsFrame","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1cebc2de.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Typography from '@material-ui/core/Typography';\nimport AssignmentIcon from '@material-ui/icons/Assignment';\nimport AssignmentTurnedInIcon from '@material-ui/icons/AssignmentTurnedIn';\nimport PageviewIcon from '@material-ui/icons/Pageview';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItem from '@material-ui/core/ListItem';\nimport { withStyles } from '@material-ui/core/styles';\nimport grey from '@material-ui/core/colors/grey';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Input from '@material-ui/core/Input';\nimport Checkbox from '@material-ui/core/Checkbox';\n\nconst styles = theme => ({\n  subtitle: {\n    display: 'inline',\n    paddingLeft: 6,\n    marginTop: 1,\n    position: 'absolute',\n  },\n  dialogBox: {\n    maxWidth: '70%',\n  },\n  subtitleIcon: {\n    display: 'inline',\n    padding: 3,\n  },\n  listItemText: {\n    marginLeft: 10,\n  },\n  ListItem: {\n    marginTop: 10,\n    marginBottom: 17,\n  },\n  textFieldContainer: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    marginTop: -22,\n  },\n  margin: {\n    margin: theme.spacing.unit,\n  },\n  textFieldLabel: {\n    '&$textFieldFocused': {\n      color: grey[500],\n    },\n  },\n  textFieldFocused: {},\n  textFieldUnderline: {\n    '&:after': {\n      borderBottomColor: grey[500],\n    },\n  },\n  section: {\n    borderBottom: '1px solid rgb(0,0,0,.25)',\n  },\n});\n\nfunction handleAdd(tcrBar) {\n  return () => {\n    tcrBar.setState((state) => {\n      const chipData = [...state.chipData];\n      chipData.push({\n        key: Math.floor(Math.random() * 10000),\n      });\n      return { chipData };\n    });\n    tcrBar.setState({ tcrDialogOpened: false });\n  };\n}\n\nconst TcrDialog = (props) => {\n  const { classes, open, handleClose, tcrBar } = props;\n\n  return (\n    <Dialog\n      open={open}\n      onClose={handleClose}\n      aria-labelledby=\"form-dialog-title\"\n      className={classes.dialogBox}\n      fullWidth\n    >\n      <DialogTitle id=\"form-dialog-title\">TCR Mechanism</DialogTitle>\n      <DialogContent>\n        <div>\n          <div className={classes.section}>\n            <AssignmentIcon className={classes.subtitleIcon} />\n            <Typography variant=\"subtitle1\" className={classes.subtitle}>\n              Application\n            </Typography>\n          </div>\n          <ListItem className={classes.ListItem}>\n            <ListItemText className={classes.listItemText}>\n              Minimum Deposit\n            </ListItemText>\n            <div className={classes.textFieldContainer}>\n              <FormControl className={classes.margin}>\n                <InputLabel\n                  htmlFor=\"minimum-deposit\"\n                  FormLabelClasses={{\n                    root: classes.textFieldLabel,\n                    focused: classes.textFieldFocused,\n                  }}\n                >\n                  number of wei\n                </InputLabel>\n                <Input\n                  id=\"minimum-deposit\"\n                  classes={{\n                    underline: classes.textFieldUnderline,\n                  }}\n                />\n              </FormControl>\n\n            </div>\n          </ListItem>\n        </div>\n        <div>\n          <div className={classes.section}>\n            <AssignmentTurnedInIcon className={classes.subtitleIcon} />\n            <Typography variant=\"subtitle1\" className={classes.subtitle}>\n              Curation\n            </Typography>\n          </div>\n          <ListItem className={classes.ListItem}>\n            <ListItemText className={classes.listItemText}>\n             Each maintainer holds equal voting rights.\n            </ListItemText>\n            <Checkbox\n              defaultChecked\n            />\n          </ListItem>\n        </div>\n        <div>\n          <div className={classes.section}>\n            <PageviewIcon className={classes.subtitleIcon} />\n            <Typography variant=\"subtitle1\" className={classes.subtitle}>\n              Access\n            </Typography>\n          </div>\n          <ListItem className={classes.ListItem}>\n            <ListItemText className={classes.listItemText}>\n             Consumer pays per access.\n            </ListItemText>\n            <Checkbox />\n          </ListItem>\n        </div>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleClose} color=\"primary\">\n          Cancel\n        </Button>\n        <Button onClick={handleAdd(tcrBar)} color=\"primary\">\n          Add\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nTcrDialog.propTypes = {\n  open: PropTypes.bool,\n  handleClose: PropTypes.func,\n  classes: PropTypes.object.isRequired, // eslint-disable-line react/forbid-prop-types\n  tcrBar: PropTypes.object.isRequired, // eslint-disable-line react/forbid-prop-types\n};\n\nTcrDialog.defaultProps = {\n  open: false,\n  handleClose: () => {},\n};\n\nexport default withStyles(styles)(TcrDialog);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport Chip from '@material-ui/core/Chip';\nimport { withStyles } from '@material-ui/core/styles';\nimport TcrDialog from './TcrDialog';\n\nconst styles = theme => ({\n  tcrBar: {\n    ...theme.mixins.gutters(),\n    paddingTop: theme.spacing.unit * 1,\n    paddingBottom: theme.spacing.unit * 1,\n  },\n  chip: {\n    margin: theme.spacing.unit / 2,\n  },\n});\n\nclass TcrBar extends React.Component {\n  constructor(props) {\n    super(props);\n    const chipData = [];\n    for (let i = 0; i < 3; i++) {\n      chipData.push({\n        key: Math.floor(Math.random() * 10000),\n      });\n    }\n    this.state = {\n      chipData,\n      tcrDialogOpened: false,\n    };\n  }\n\n  handleDelete(data) {\n    return () => {\n      this.setState((state) => {\n        const chipData = [...state.chipData];\n        const chipToDelete = chipData.indexOf(data);\n        chipData.splice(chipToDelete, 1);\n        return { chipData };\n      });\n    };\n  }\n\n  handleClick(data) { // eslint-disable-line\n    return () => {\n      alert(`key: ${data.key}`); // eslint-disable-line no-alert\n    };\n  }\n\n  handleAddClick() {\n    return () => {\n      this.setState({ tcrDialogOpened: true });\n      // this.setState((state) => {\n      //   const chipData = [...state.chipData];\n      //   chipData.push({\n      //     key: Math.floor(Math.random() * 10000),\n      //   });\n      //   return { chipData };\n      // });\n    };\n  }\n\n  handleTcrDialogClose() {\n    return () => {\n      this.setState({ tcrDialogOpened: false });\n    };\n  }\n\n  render() {\n    const { classes } = this.props;\n    const { chipData, tcrDialogOpened } = this.state;\n\n    return (\n      <Paper elevation={1} square className={classes.tcrBar}>\n        <Typography variant=\"h6\" component=\"h2\" color=\"secondary\">\n          TCR Mechanisms\n        </Typography>\n        {chipData.map((data, i) => (\n          <Chip\n            key={data.key}\n            label={`TCR${i + 1}`}\n            onDelete={this.handleDelete(data)}\n            onClick={this.handleClick(data)}\n            className={classes.chip}\n            color=\"primary\"\n            variant=\"outlined\"\n          />\n        ))}\n        <Chip\n          label=\"+\"\n          className={classes.chip}\n          onClick={this.handleAddClick()}\n          color=\"primary\"\n        />\n        <TcrDialog open={tcrDialogOpened} handleClose={this.handleTcrDialogClose()} tcrBar={this} />\n      </Paper>\n    );\n  }\n}\n\nTcrBar.propTypes = {\n  classes: PropTypes.object.isRequired, // eslint-disable-line react/forbid-prop-types\n};\n\nexport default withStyles(styles)(TcrBar);\n","import React from 'react';\nimport PropTypes from 'prop-types'; import Card from '@material-ui/core/Card';\nimport { withStyles } from '@material-ui/core/styles';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Slider from '@material-ui/lab/Slider';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\n\nconst styles = {\n  card: {\n    width: '100%',\n  },\n  bullet: {\n    display: 'inline-block',\n    margin: '0 2px',\n    transform: 'scale(0.8)',\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n  slider: {\n    padding: '22px 0px',\n  },\n  agent: {\n    fontSize: '16px',\n    fontWeight: 500,\n  },\n};\n\n\nclass BaseCard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      ...this.props,\n      ignoreQuality: true,\n    };\n  }\n\n  getBehaviorComponents() {\n    const { classes } = this.props;\n    const { type, frequency, ignoreQuality, qualityScale } = this.state;\n    if (type === 'maintainer') {\n      return (\n        <div>\n          <FormControlLabel\n            label=\"Ignore submission quality\"\n            control=<Checkbox\n              label=\"Submission Quality\"\n              checked={ignoreQuality}\n              onChange={this.handleChangeQuality('ignoreQuality')}\n              value=\"ignoreQuality\"\n            />\n          />\n          <Typography>Acceptance Likelihood</Typography>\n          {' '}\n          {frequency}\n          <Slider\n            className={classes.slider}\n            value={frequency}\n            onChange={this.handleChangeFreqSlider}\n          />\n        </div>\n      );\n    }\n    if (type === 'contributor') {\n      return (\n        <div>\n          <Typography>Submission Frequency</Typography>\n          {' '}\n          {frequency}\n          <Slider\n            className={classes.slider}\n            value={frequency}\n            onChange={this.handleChangeFreqSlider}\n          />\n          <Typography>Submission Quality</Typography>\n          {' '}\n          {qualityScale}\n          <Slider\n            className={classes.slider}\n            value={qualityScale}\n            onChange={this.handleChangeQualSlider}\n          />\n        </div>\n      );\n    }\n    return <div />;\n  }\n\n  handleChange = name => (event) => {\n    this.setState({\n      [name]: event.target.value,\n    });\n  };\n\n  handleChangeQuality = name => (event) => {\n    this.setState({ [name]: event.target.checked });\n  };\n\n  handleChangeFreqSlider = (event, value) => {\n    this.setState({ frequency: value });\n  };\n\n  handleChangeQualSlider = (event, value) => {\n    this.setState({ qualityScale: value });\n  };\n\n  render() {\n    const { classes } = this.props;\n    const { type, population } = this.state;\n    return (\n      <Card className={classes.card}>\n        <CardContent>\n          <Typography className={classes.agent}>\n            {type.toUpperCase()}\n          </Typography>\n          <form className={classes.container} noValidate autoComplete=\"off\">\n            <TextField\n              id=\"standard_number\"\n              label=\"Number\"\n              value={population}\n              onChange={this.handleChange('population')}\n              type=\"number\"\n              className={classes.textField}\n              InputLabelProps={{\n                shrink: true,\n              }}\n              margin=\"normal\"\n            />\n            {this.getBehaviorComponents()}\n          </form>\n        </CardContent>\n      </Card>\n    );\n  }\n}\n\n/* eslint-disable react/no-unused-prop-types */\nBaseCard.propTypes = {\n  classes: PropTypes.object.isRequired, // eslint-disable-line react/forbid-prop-types\n  type: PropTypes.string.isRequired,\n  population: PropTypes.number.isRequired,\n  qualityScale: PropTypes.number,\n  acceptanceLikelihood: PropTypes.number.isRequired,\n  frequency: PropTypes.number,\n};\n\nBaseCard.defaultProps = {\n  frequency: 0,\n  qualityScale: 0,\n};\n/* eslint-enable react/no-unused-prop-types */\nexport default withStyles(styles)(BaseCard);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport TcrBar from './TcrBar';\nimport BaseCard from './BaseCard';\n\nconst agents = [\n  {\n    type: 'maintainer',\n    population: 1,\n    behaviors: {\n      ignoreQuality: false,\n      acceptanceLikelihood: 50,\n    },\n  },\n  {\n    type: 'contributor',\n    population: 20,\n    behaviors: {\n      qualityScale: 70,\n      frequency: 15,\n    },\n  },\n  {\n    type: 'user',\n    population: 50,\n  },\n];\n\nconst styles = {\n  agentsList: {\n  },\n};\n\nconst SettingsFrame = (props) => {\n  const { classes, className } = props;\n  return (\n    <div id=\"settings\" className={className}>\n      <TcrBar />\n      <div id=\"agents-list\" className={classes.agentsList}>\n        <List component=\"nav\">\n          {agents.map(agent => (\n            <ListItem>\n              <BaseCard\n                type={agent.type}\n                population={agent.population}\n                qualityScale={agent.qualityScale}\n                frequency={agent.frequency}\n                acceptanceLikelihood={agent.acceptanceLikelihood}\n              />\n            </ListItem>\n          ))}\n        </List>\n      </div>\n    </div>\n  );\n};\n\nSettingsFrame.propTypes = {\n  classes: PropTypes.object.isRequired, // eslint-disable-line react/forbid-prop-types\n  className: PropTypes.string,\n};\n\nSettingsFrame.defaultProps = {\n  className: null,\n};\n\nexport default withStyles(styles)(SettingsFrame);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst ResultsFrame = (props) => {\n  const { className } = props;\n  return (\n    <div id=\"results\" className={className}>\n      <h1>Results!</h1>\n    </div>\n  );\n};\n\nResultsFrame.propTypes = {\n  className: PropTypes.string,\n};\n\nResultsFrame.defaultProps = {\n  className: null,\n};\n\nexport default ResultsFrame;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport AppBar from '@material-ui/core/AppBar';\nimport Typography from '@material-ui/core/Typography';\nimport { MuiThemeProvider, createMuiTheme, withStyles } from '@material-ui/core/styles';\nimport teal from '@material-ui/core/colors/teal';\nimport SettingsFrame from './SettingsFrame';\nimport ResultsFrame from './ResultsFrame';\n\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: teal,\n    secondary: {\n      main: '#444444',\n    },\n  },\n});\n\nconst styles = {\n  root: {\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  content: {\n    height: '100%',\n    display: 'flex',\n  },\n  settingFrame: {\n    display: 'flex',\n    flexDirection: 'column',\n    height: '100%',\n    overflow: 'auto',\n    boxShadow: '2px 0 2px rgba(0,0,0,.1)',\n    borderRight: '1px solid rgba(0,0,0,.25)',\n    zIndex: 10,\n    flexBasis: '35%',\n    boxSizing: 'border-box',\n  },\n  resultFrame: {\n    flexGrow: 1,\n    padding: '0 20px',\n  },\n\n};\n\nconst Dashboard = (props) => {\n  const { classes } = props;\n  return (\n    <MuiThemeProvider theme={theme}>\n      <div className={classes.root}>\n        <AppBar position=\"relative\" color=\"primary\" elevation={2}>\n          <Toolbar>\n            <Typography variant=\"h5\" color=\"inherit\">\n              TCR Simulator\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        <div id=\"content\" className={classes.content}>\n          <SettingsFrame className={classes.settingFrame} />\n          <ResultsFrame className={classes.resultFrame} />\n        </div>\n      </div>\n    </MuiThemeProvider>\n  );\n};\n\nDashboard.propTypes = {\n  classes: PropTypes.object.isRequired, // eslint-disable-line react/forbid-prop-types\n};\n\nexport default withStyles(styles)(Dashboard);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404\n        || response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}