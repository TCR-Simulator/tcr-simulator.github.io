{"version":3,"sources":["TcrBar.js","SettingsFrame.js","ResultsFrame.js","App.js","serviceWorker.js","index.js"],"names":["TcrBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","chipData","i","push","key","Math","floor","random","state","data","_this2","setState","toConsumableArray","chipToDelete","indexOf","splice","alert","concat","_this3","_this4","classes","react_default","a","createElement","Paper_default","elevation","square","className","tcrBar","Typography_default","variant","component","color","map","Chip_default","label","onDelete","handleDelete","onClick","handleClick","chip","handleAddClick","React","Component","withStyles","theme","objectSpread","mixins","gutters","paddingTop","spacing","unit","paddingBottom","margin","SettingsFrame","id","src_TcrBar","defaultProps","ResultsFrame","createMuiTheme","palette","primary","teal","secondary","main","root","height","display","flexDirection","content","settingFrame","boxShadow","borderRight","zIndex","flexBasis","boxSizing","resultFrame","flexGrow","padding","core_styles","AppBar_default","position","Toolbar_default","src_SettingsFrame","src_ResultsFrame","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8816cdcb.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport Chip from '@material-ui/core/Chip';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst styles = theme => ({\n  tcrBar: {\n    ...theme.mixins.gutters(),\n    paddingTop: theme.spacing.unit * 1,\n    paddingBottom: theme.spacing.unit * 1,\n  },\n  chip: {\n    margin: theme.spacing.unit / 2,\n  },\n});\n\nclass TcrBar extends React.Component {\n  constructor(props) {\n    super(props);\n    const chipData = [];\n    for (let i = 0; i < 3; i++) {\n      chipData.push({\n        key: Math.floor(Math.random() * 10000),\n      });\n    }\n    this.state = {\n      chipData,\n    };\n  }\n\n  handleDelete(data) {\n    return () => {\n      this.setState((state) => {\n        const chipData = [...state.chipData];\n        const chipToDelete = chipData.indexOf(data);\n        chipData.splice(chipToDelete, 1);\n        return { chipData };\n      });\n    };\n  }\n\n  handleClick(data) { // eslint-disable-line\n    return () => {\n      alert(`key: ${data.key}`); // eslint-disable-line no-alert\n    };\n  }\n\n  handleAddClick() {\n    return () => {\n      this.setState((state) => {\n        const chipData = [...state.chipData];\n        chipData.push({\n          key: Math.floor(Math.random() * 10000),\n        });\n        return { chipData };\n      });\n    };\n  }\n\n  render() {\n    const { classes } = this.props;\n    const { chipData } = this.state;\n\n    return (\n      <Paper elevation={1} square className={classes.tcrBar}>\n        <Typography variant=\"h6\" component=\"h2\" color=\"secondary\">\n          TCR Mechanisms\n        </Typography>\n        {chipData.map((data, i) => (\n          <Chip\n            key={data.key}\n            label={`TCR${i + 1}`}\n            onDelete={this.handleDelete(data)}\n            onClick={this.handleClick(data)}\n            className={classes.chip}\n            color=\"primary\"\n            variant=\"outlined\"\n          />\n        ))}\n        <Chip\n          label=\"+\"\n          className={classes.chip}\n          onClick={this.handleAddClick()}\n          color=\"primary\"\n        />\n      </Paper>\n    );\n  }\n}\n\nTcrBar.propTypes = {\n  classes: PropTypes.object.isRequired, // eslint-disable-line react/forbid-prop-types\n};\n\nexport default withStyles(styles)(TcrBar);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TcrBar from './TcrBar';\n\nconst SettingsFrame = (props) => {\n  const { className } = props;\n  return (\n    <div id=\"settings\" className={className}>\n      <TcrBar />\n    </div>\n  );\n};\n\nSettingsFrame.propTypes = {\n  className: PropTypes.string,\n};\n\nSettingsFrame.defaultProps = {\n  className: null,\n};\n\nexport default SettingsFrame;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst ResultsFrame = (props) => {\n  const { className } = props;\n  return (\n    <div id=\"results\" className={className}>\n      <h1>Results!</h1>\n    </div>\n  );\n};\n\nResultsFrame.propTypes = {\n  className: PropTypes.string,\n};\n\nResultsFrame.defaultProps = {\n  className: null,\n};\n\nexport default ResultsFrame;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport AppBar from '@material-ui/core/AppBar';\nimport Typography from '@material-ui/core/Typography';\nimport { MuiThemeProvider, createMuiTheme, withStyles } from '@material-ui/core/styles';\nimport teal from '@material-ui/core/colors/teal';\nimport SettingsFrame from './SettingsFrame';\nimport ResultsFrame from './ResultsFrame';\n\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: teal,\n    secondary: {\n      main: '#444444',\n    },\n  },\n});\n\nconst styles = {\n  root: {\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  content: {\n    height: '100%',\n    display: 'flex',\n  },\n  settingFrame: {\n    boxShadow: '2px 0 2px rgba(0,0,0,.1)',\n    borderRight: '1px solid rgba(0,0,0,.25)',\n    zIndex: 10,\n    flexBasis: '35%',\n    boxSizing: 'border-box',\n  },\n  resultFrame: {\n    flexGrow: 1,\n    padding: '0 20px',\n  },\n\n};\n\nconst Dashboard = (props) => {\n  const { classes } = props;\n  return (\n    <MuiThemeProvider theme={theme}>\n      <div className={classes.root}>\n        <AppBar position=\"relative\" color=\"primary\" elevation={2}>\n          <Toolbar>\n            <Typography variant=\"h5\" color=\"inherit\">\n              TCR Simulator\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        <div id=\"content\" className={classes.content}>\n          <SettingsFrame className={classes.settingFrame} />\n          <ResultsFrame className={classes.resultFrame} />\n        </div>\n      </div>\n    </MuiThemeProvider>\n  );\n};\n\nDashboard.propTypes = {\n  classes: PropTypes.object.isRequired, // eslint-disable-line react/forbid-prop-types\n};\n\nexport default withStyles(styles)(Dashboard);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404\n        || response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}